#!/usr/bin/python
# -*- coding: UTF-8 -*-
#
#
#===============================================================================
# Система дополнительной настройик программ и ОС
# с поддержкой плоагинов.
#  Основное назначение - легкая подготовки рабочего места к 
#  работе в режиме kiosk-mode
#
#===============================================================================
# ОС: Linux
# Окружение: стандартный набор программ пославляемый в ПСПО5
#
#===============================================================================
#
#
# 2010.10.24 Denjs:
# * Изменил механизм регистрации пагинов (думаю что стало проще подключать, 
#   хотя в плагине надо менять на 2 строчки больше)
# * Изменил механизм описания опций и их описаний.
# * Вбил в DummyFF все опции для FireFox. Выявилось, что скроллиннг в этом окне не работает....
# * Разное, мелкое типа комментов и укзания кодировки UTF-8
# 
# 2010.09.xx minoru-kun
# * первая версия "технологический прототип" )))
#
# предыстория: http://unixforum.org/index.php?showtopic=117466
#
#
#===============================================================================

import controller_qt
import application

#-- plugin imports
import dummyFF
#--

controller = controller_qt.Controller()
#-- plugin initializations here
controller.register_app(dummyFF)
#--

import sys


#from PyQt4 import QtGui
#if __name__=="__main__":
#    # создаём объект Qt-приложения и передаём его конструктору параметры командной строки:
#    app = QtGui.QApplication(sys.argv)
#    # создаём объект класса QLabel (метка), в конструкторе задаём подпись для метки:
#    label = QtGui.QLabel(u'Привет, мир!\nЭто самый простой пример для PyQt4.')    
#    # отображаем метку на экране:
#    label.show()
#    # запускаем цикл обработки событий:
#    sys.exit(app.exec_())

controller.proceed()
controller.main()

